{"ast":null,"code":"import _classCallCheck from \"/Users/lukefuller/CodingBootCamp/clickyGame/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lukefuller/CodingBootCamp/clickyGame/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/lukefuller/CodingBootCamp/clickyGame/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lukefuller/CodingBootCamp/clickyGame/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/lukefuller/CodingBootCamp/clickyGame/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/lukefuller/CodingBootCamp/clickyGame/src/App.js\";\nimport React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport WrapperImages from \"./components/WrapperImages\";\nimport FriendCard from \"./components/FriendCard\";\nimport friendList from \"./friends.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friendList: friendList,\n      selected: [],\n      score: 0,\n      topScore: 0,\n      status: ''\n    };\n\n    _this.selectedFriend = function (id) {\n      // Add previously selected ids to the selected array and shuffle the friendsList\n      _this.setState({\n        selected: _this.state.selected.concat(id),\n        friendList: _this.shuffle(friendList)\n      }); // Search to see if id has already been selected\n\n\n      var selected = _this.state.selected.find(function (element) {\n        return element === id;\n      }); // Check if an id was selected\n\n\n      if (!selected) {\n        // Increment Score\n        _this.setState({\n          score: _this.state.score + 1\n        }); // Increment Top Score if Score and TopScore are the same\n\n\n        _this.setState({\n          topScore: _this.state.score >= _this.state.topScore ? _this.state.topScore + 1 : _this.state.topScore\n        }); // Display correct guess\n\n\n        _this.setState({\n          status: 'You guessed correctly!'\n        });\n\n        console.log(\"score\", _this.state.score); // Check to see if all guess were correct\n\n        if (_this.state.score === 11) {\n          _this.setState({\n            status: 'You win!'\n          });\n        }\n      } else {\n        // Reset Score and Selected Ids - Display incorrect guess\n        _this.setState({\n          score: 0,\n          selected: [],\n          status: 'You guessed incorrectly! Try again...'\n        }); // Make game shake everytime some lose\n\n\n        var element = document.getElementById(\"shakerBox\");\n        element.classList.remove(\"shakeFriends\");\n        void element.offsetWidth;\n        element.classList.add(\"shakeFriends\");\n      }\n    };\n\n    _this.shuffle = function (sourceArray) {\n      for (var i = 0; i < sourceArray.length - 1; i++) {\n        var j = i + Math.floor(Math.random() * (sourceArray.length - i));\n        var temp = sourceArray[j];\n        sourceArray[j] = sourceArray[i];\n        sourceArray[i] = temp;\n      }\n\n      return sourceArray;\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // When this component mounts, shuffle the FriendList Array\n    value: function componentDidMount() {\n      this.setState({\n        friendList: this.shuffle(friendList)\n      });\n    } // Trigger when friend is selected\n\n  }, {\n    key: \"render\",\n    // Map over this.state.friends and render a FriendCard component for each friend object\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Header, {\n        status: this.state.status || \"Click an image to begin!\",\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(WrapperImages, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.state.friendList.map(function (friend) {\n        return React.createElement(FriendCard, {\n          selectedFriend: _this2.selectedFriend,\n          id: friend.id,\n          key: friend.id,\n          name: friend.name,\n          image: friend.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/lukefuller/CodingBootCamp/clickyGame/src/App.js"],"names":["React","Component","Wrapper","Header","Jumbotron","WrapperImages","FriendCard","friendList","App","state","selected","score","topScore","status","selectedFriend","id","setState","concat","shuffle","find","element","console","log","document","getElementById","classList","remove","offsetWidth","add","sourceArray","i","length","j","Math","floor","random","temp","map","friend","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport WrapperImages from \"./components/WrapperImages\";\nimport FriendCard from \"./components/FriendCard\";\nimport friendList from \"./friends.json\";\n\nclass App extends Component {\n\n  // Setting this.state.friends to the friends json array\n  state = {\n    friendList,\n    selected: [],\n    score: 0,\n    topScore: 0,\n    status: ''\n  };\n\n  // When this component mounts, shuffle the FriendList Array\n  componentDidMount() {\n\n    this.setState({ friendList: this.shuffle(friendList) })\n  }\n\n  // Trigger when friend is selected\n  selectedFriend = id => {\n\n    // Add previously selected ids to the selected array and shuffle the friendsList\n    this.setState({\n      selected: this.state.selected.concat(id),\n      friendList: this.shuffle(friendList)\n    });\n\n    // Search to see if id has already been selected\n    const selected = this.state.selected.find(element => { return element === id });\n\n    // Check if an id was selected\n    if (!selected) {\n\n      // Increment Score\n      this.setState({ score: this.state.score + 1 });\n\n      // Increment Top Score if Score and TopScore are the same\n      this.setState({\n        topScore: this.state.score >= this.state.topScore ? this.state.topScore + 1 : this.state.topScore\n      });\n\n      // Display correct guess\n      this.setState({ status: 'You guessed correctly!' })\n\n      console.log(\"score\", this.state.score);\n\n      // Check to see if all guess were correct\n      if (this.state.score === 11) {\n\n        this.setState({ status: 'You win!' })\n      }\n    }\n    else {\n\n      // Reset Score and Selected Ids - Display incorrect guess\n      this.setState({\n        score: 0,\n        selected: [],\n        status: 'You guessed incorrectly! Try again...'\n      });\n\n      // Make game shake everytime some lose\n      var element = document.getElementById(\"shakerBox\");\n      element.classList.remove(\"shakeFriends\");\n      void element.offsetWidth;\n      element.classList.add(\"shakeFriends\");\n\n    }\n  };\n\n  // Shuffle the FriendList array\n  shuffle = sourceArray => {\n    for (var i = 0; i < sourceArray.length - 1; i++) {\n      var j = i + Math.floor(Math.random() * (sourceArray.length - i));\n\n      var temp = sourceArray[j];\n      sourceArray[j] = sourceArray[i];\n      sourceArray[i] = temp;\n    }\n    return sourceArray;\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Header status={this.state.status || \"Click an image to begin!\"} score={this.state.score} topScore={this.state.topScore} />\n        <Jumbotron />\n        <WrapperImages>\n          {this.state.friendList.map(friend => (\n            <FriendCard\n              selectedFriend={this.selectedFriend}\n              id={friend.id}\n              key={friend.id}\n              name={friend.name}\n              image={friend.image}\n            />\n          ))}\n        </WrapperImages>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}